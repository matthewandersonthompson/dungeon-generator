#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const fs_1 = require("fs");
const fsSync = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const glob_1 = require("glob");
const ignore_1 = __importDefault(require("ignore"));
const utils_1 = require("./utils");
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB in bytes
async function readIgnoreFile(inputDir, filename) {
    try {
        const filePath = path_1.default.join(inputDir, filename);
        const content = await fs_1.promises.readFile(filePath, "utf-8");
        console.log((0, utils_1.formatLog)(`Found ${filename} file in ${inputDir}.`, "üìÑ"));
        return content
            .split("\n")
            .filter((line) => line.trim() !== "" && !line.startsWith("#"));
    }
    catch (error) {
        if (error.code === "ENOENT") {
            console.log((0, utils_1.formatLog)(`No ${filename} file found in ${inputDir}.`, "‚ùì"));
            return [];
        }
        throw error;
    }
}
function displayIncludedFiles(includedFiles) {
    console.log((0, utils_1.formatLog)("Files included in the output:", "üìã"));
    includedFiles.forEach((file, index) => {
        console.log(`${index + 1}. ${file}`);
    });
}
function naturalSort(a, b) {
    return a.localeCompare(b, undefined, { numeric: true, sensitivity: "base" });
}
async function aggregateFiles(inputDir, outputFile, useDefaultIgnores, removeWhitespaceFlag, showOutputFiles, ignoreFile) {
    try {
        const userIgnorePatterns = await readIgnoreFile(inputDir, ignoreFile);
        const defaultIgnore = useDefaultIgnores
            ? (0, ignore_1.default)().add(utils_1.DEFAULT_IGNORES)
            : (0, ignore_1.default)();
        const customIgnore = (0, utils_1.createIgnoreFilter)(userIgnorePatterns, ignoreFile);
        if (useDefaultIgnores) {
            console.log((0, utils_1.formatLog)("Using default ignore patterns.", "üö´"));
        }
        else {
            console.log((0, utils_1.formatLog)("Default ignore patterns disabled.", "‚úÖ"));
        }
        if (removeWhitespaceFlag) {
            console.log((0, utils_1.formatLog)("Whitespace removal enabled (except for whitespace-dependent languages).", "üßπ"));
        }
        else {
            console.log((0, utils_1.formatLog)("Whitespace removal disabled.", "üìù"));
        }
        const allFiles = await (0, glob_1.glob)("**/*", {
            nodir: true,
            dot: true,
            cwd: inputDir,
        });
        console.log((0, utils_1.formatLog)(`Found ${allFiles.length} files in ${inputDir}. Applying filters...`, "üîç"));
        let output = "";
        let includedCount = 0;
        let defaultIgnoredCount = 0;
        let customIgnoredCount = 0;
        let binaryAndSvgFileCount = 0;
        let includedFiles = [];
        // Sort the files in natural path order
        const sortedFiles = allFiles.sort(naturalSort);
        for (const file of sortedFiles) {
            const fullPath = path_1.default.join(inputDir, file);
            const relativePath = path_1.default.relative(inputDir, fullPath);
            if (path_1.default.relative(inputDir, outputFile) === relativePath ||
                (useDefaultIgnores && defaultIgnore.ignores(relativePath))) {
                defaultIgnoredCount++;
            }
            else if (customIgnore.ignores(relativePath)) {
                customIgnoredCount++;
            }
            else {
                if ((await (0, utils_1.isTextFile)(fullPath)) && !(0, utils_1.shouldTreatAsBinary)(fullPath)) {
                    let content = await fs_1.promises.readFile(fullPath, "utf-8");
                    const extension = path_1.default.extname(file);
                    content = (0, utils_1.escapeTripleBackticks)(content);
                    if (removeWhitespaceFlag &&
                        !utils_1.WHITESPACE_DEPENDENT_EXTENSIONS.includes(extension)) {
                        content = (0, utils_1.removeWhitespace)(content);
                    }
                    output += `# ${relativePath}\n\n`;
                    output += `\`\`\`${extension.slice(1)}\n`;
                    output += content;
                    output += "\n\`\`\`\n\n";
                    includedCount++;
                    includedFiles.push(relativePath);
                }
                else {
                    const fileType = (0, utils_1.getFileType)(fullPath);
                    output += `# ${relativePath}\n\n`;
                    if (fileType === "SVG Image") {
                        output += `This is a file of the type: ${fileType}\n\n`;
                    }
                    else {
                        output += `This is a binary file of the type: ${fileType}\n\n`;
                    }
                    binaryAndSvgFileCount++;
                    includedCount++;
                    includedFiles.push(relativePath);
                }
            }
        }
        await fs_1.promises.mkdir(path_1.default.dirname(outputFile), { recursive: true });
        await fs_1.promises.writeFile(outputFile, output, { flag: "w" });
        const stats = await fs_1.promises.stat(outputFile);
        const fileSizeInBytes = stats.size;
        if (stats.size !== Buffer.byteLength(output)) {
            throw new Error("File size mismatch after writing");
        }
        console.log((0, utils_1.formatLog)(`Files aggregated successfully into ${outputFile}`, "‚úÖ"));
        console.log((0, utils_1.formatLog)(`Total files found: ${allFiles.length}`, "üìö"));
        console.log((0, utils_1.formatLog)(`Files included in output: ${includedCount}`, "üìé"));
        if (useDefaultIgnores) {
            console.log((0, utils_1.formatLog)(`Files ignored by default patterns: ${defaultIgnoredCount}`, "üö´"));
        }
        if (customIgnoredCount > 0) {
            console.log((0, utils_1.formatLog)(`Files ignored by .aidigestignore: ${customIgnoredCount}`, "üö´"));
        }
        console.log((0, utils_1.formatLog)(`Binary and SVG files included: ${binaryAndSvgFileCount}`, "üì¶"));
        if (fileSizeInBytes > MAX_FILE_SIZE) {
            console.log((0, utils_1.formatLog)(`Warning: Output file size (${(fileSizeInBytes / 1024 / 1024).toFixed(2)} MB) exceeds 10 MB.`, "‚ö†Ô∏è"));
            console.log((0, utils_1.formatLog)("Token count estimation skipped due to large file size.", "‚ö†Ô∏è"));
            console.log((0, utils_1.formatLog)("Consider adding more files to .aidigestignore to reduce the output size.", "üí°"));
        }
        else {
            const tokenCount = (0, utils_1.estimateTokenCount)(output);
            console.log((0, utils_1.formatLog)(`Estimated token count: ${tokenCount}`, "üî¢"));
            console.log((0, utils_1.formatLog)("Note: Token count is an approximation using GPT-4 tokenizer. For ChatGPT, it should be accurate. For Claude, it may be ¬±20% approximately.", "‚ö†Ô∏è"));
        }
        if (showOutputFiles) {
            displayIncludedFiles(includedFiles);
        }
        console.log((0, utils_1.formatLog)(`Done! Wrote code base to ${outputFile}`, "‚úÖ"));
    }
    catch (error) {
        console.error((0, utils_1.formatLog)("Error aggregating files:", "‚ùå"), error);
        process.exit(1);
    }
}
// Read package.json to get the version
const packageJsonPath = path_1.default.join(__dirname, '..', 'package.json');
const packageJson = JSON.parse(fsSync.readFileSync(packageJsonPath, 'utf-8'));
commander_1.program
    .version(packageJson.version)
    .description("Aggregate files into a single Markdown file")
    .option("-i, --input <directory>", "Input directory", process.cwd())
    .option("-o, --output <file>", "Output file name", "codebase.md")
    .option("--no-default-ignores", "Disable default ignore patterns")
    .option("--whitespace-removal", "Enable whitespace removal")
    .option("--show-output-files", "Display a list of files included in the output")
    .option("--ignore-file <file>", "Custom ignore file name", ".aidigestignore")
    .action(async (options) => {
    const inputDir = path_1.default.resolve(options.input);
    const outputFile = path_1.default.isAbsolute(options.output)
        ? options.output
        : path_1.default.join(process.cwd(), options.output);
    await aggregateFiles(inputDir, outputFile, options.defaultIgnores, options.whitespaceRemoval, options.showOutputFiles, options.ignoreFile);
});
commander_1.program.parse(process.argv);
